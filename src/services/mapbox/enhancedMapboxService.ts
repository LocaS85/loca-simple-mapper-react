
import { SearchResult } from '@/types/geosearch';
import { enhancedGeocodingService } from './enhancedGeocodingService';
import { mockDataService } from './mockDataService';

interface SearchOptions {
  limit?: number;
  radius?: number;
  categories?: string[];
}

export const enhancedMapboxService = {
  async searchPlaces(
    query: string,
    center: [number, number],
    options: SearchOptions = {}
  ): Promise<SearchResult[]> {
    try {
      console.log('üöÄ Enhanced Mapbox Service - Architecture POI unifi√©e avec expansion automatique');
      
      // Utiliser le service unifi√© qui g√®re marques + Search Box API + expansion
      const results = await enhancedGeocodingService.searchPlaces(query, center, {
        limit: options.limit || 10,
        radius: options.radius || 50, // Rayon √©largi par d√©faut
        categories: options.categories || ['poi', 'poi.business', 'poi.shopping', 'poi.retail']
      });
      
      if (results.length > 0) {
        console.log('‚úÖ Architecture POI unifi√©e - R√©sultats trouv√©s:', results.length);
        return results;
      }
      
      // Fallback final vers donn√©es simul√©es (rare)
      console.log('üîÑ Fallback final vers donn√©es simul√©es');
      return mockDataService.getMockResults(center, query);
      
    } catch (error) {
      console.error('‚ùå Erreur Enhanced Mapbox Service unifi√©:', error);
      return mockDataService.getMockResults(center, query);
    }
  },

  // M√©thode pour l'autocompl√©tion rapide
  async getQuickSuggestions(
    query: string,
    center: [number, number],
    limit: number = 5
  ): Promise<SearchResult[]> {
    try {
      return await enhancedGeocodingService.getQuickSuggestions(query, center, limit);
    } catch (error) {
      console.error('‚ùå Erreur suggestions rapides:', error);
      return [];
    }
  }
};
